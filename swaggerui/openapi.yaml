openapi: "3.0.0"
info:
  version: 1.0.0
  title: gosrv
  description: A golang RESTful API server
  license:
    name: MIT
paths:
  /users:
    get:
      description: Returns all users
      operationId: findUsers
      responses:
        '200':
          description: users response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new user
      operationId: addUser
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad user payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      description: Returns a user based on the ID
      operationId: findUserById
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Updates a user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: string
      requestBody:
        description: User data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: user updated response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad user payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single user based on the ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: user deleted
        '404':
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      required:
        - email
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string

    NewUser:
      type: object
      required:
        - email
      properties:
        name:
          type: string
        email:
          type: string

    Error:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
